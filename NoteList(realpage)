import 'package:flutter/material.dart';
import 'package:hazlo/Pages_Screens/NoteDetails.dart';
import  'package:hazlo/Model/Notes.dart';
import 'package:hazlo/utils/database_helper.dart';
import 'dart:async';
import  'package:sqflite/sqflite.dart';

import 'Calendar.dart';



class NoteList extends StatefulWidget {


  @override
  State<StatefulWidget> createState() {

    return NoteListState();
  }
}

class NoteListState extends State<NoteList> {

  DatabaseHelper databaseHelper = DatabaseHelper();
  List<Note> noteList;
  int count = 0;


  @override
  Widget build(BuildContext context) {
    if (noteList == null) {
      noteList = List<Note>();
      updateListView();
    }
    return Scaffold(
      appBar: AppBar(
        title: Text('Notes'),
        backgroundColor: Color(0xFF005792),
      ),
      body: getNoteListView(),

      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: <Widget>[
          // FAB 2: Calender Button
          FloatingActionButton(
            child: Icon(Icons.date_range),
            onPressed: () {
            navigateToCalendar();
            },
            heroTag: null,
            backgroundColor: Color(0xFF005792),
          ),
          SizedBox(
            height: 10,
          ),

          // FAB 1: Add button
          FloatingActionButton(
            child: Icon(Icons.mode_edit),
            onPressed: () {
              debugPrint('FAB clicked');
              navigateToDetail(Note('', '', 2), 'Add Note');
            },
            heroTag: null,
            backgroundColor: Color(0xFF005792),

          )
        ],

      ),

    );
  }

  ListView getNoteListView() {
    TextStyle titleStyle = Theme.of(context).textTheme.subhead;

    return ListView.builder(itemCount: count,
             itemBuilder: (BuildContext context,int position) {

      // button colours
               //swipe do delete function
             return Dismissible(
                 key: Key('item'),
               onDismissed: (direction) {
                 setState(() {
                   _delete(context, noteList[position]);
                 });
               },
               child:ListTile (
                 leading: CircleAvatar(
                   backgroundColor: getPriorityColor(this.noteList[position].priority),
                   child: getPriorityIcon(this.noteList[position].priority),
                 ),
                 title:Text (this.noteList[position].title, style: titleStyle,),
                 subtitle: Text(this.noteList[position].date),
                // event handler
                 onTap: () {
                   debugPrint("ListTile Tapped");
                   navigateToDetail(this.noteList[position],'Edit Note');
                 },
               )
             );
             }

    );
    

}

  // Returns the priority color
  Color getPriorityColor(int priority) {

    switch(priority) {
      case 1:
        return Colors.red;
        break;
      case 2:
        return Colors.blue;
        break;
      default:
        return Colors.blue;
    }
  }
  // Returns the priority icon
  Icon getPriorityIcon(int priority) {
    switch (priority) {
      case 1:
        return Icon(Icons.notification_important);
        break;
      case 2 :
        return Icon(Icons.note);
        break;

      default:
        return Icon(Icons.note);
    }
  }
  void _delete(BuildContext context, Note  note) async {
    int result = await databaseHelper.deleteNote(note.id);
    if(result !=0) {
   _showSnackBar(context, 'Note Deleted');
    updateListView();
    }
  }

  void _showSnackBar(BuildContext context, String message) {
    final snackBar = SnackBar(content:  Text(message));
    Scaffold.of(context).showSnackBar(snackBar);
  }

  void navigateToDetail(Note note ,String title) async {
   bool result = await Navigator.push(context,MaterialPageRoute(builder: (context){
      return NoteDetail(note,title);
    }));

   if ( result == true ) {
     updateListView();
   }
  }

  void navigateToCalendar() async {
    bool result = await Navigator.push(context,MaterialPageRoute(builder: (context){
      return Calendar();
    }));

  }
  void updateListView() {
    final Future<Database> dbFuture = databaseHelper.initializeDatabase();
    dbFuture.then((database) {

      Future<List<Note>> noteListFuture = databaseHelper.getNoteList();
       noteListFuture.then((noteList) {
         setState(() {
           this.noteList = noteList;
           this.count = noteList.length;
         });

      });
    });
  }
}
